# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from new import Ui_New
from open_win import Ui_Open
from save import Ui_save_box
from evaluate import Ui_Evaluate
from errorbox import Ui_error_box
from calc_points import player_points

import sqlite3
myfantasy=sqlite3.connect('fantasy_cricket_DB.db')
cursfantasy=myfantasy.cursor()

class Ui_MainWindow(object):
    def __init__(self):
        self.New = QtWidgets.QDialog()
        self.new_ob = Ui_New()
        self.new_ob.setupUi(self.New)

        self.Open = QtWidgets.QDialog()
        self.open_ob = Ui_Open()
        self.open_ob.setupUi(self.Open)

        self.save_box = QtWidgets.QDialog()
        self.save_ob = Ui_save_box()
        self.save_ob.setupUi(self.save_box)
        
        self.Evaluate = QtWidgets.QDialog()
        self.evaluate_ob = Ui_Evaluate()
        self.evaluate_ob.setupUi(self.Evaluate)

        self.error_box = QtWidgets.QDialog()
        self.error_ob = Ui_error_box()
        self.error_ob.setupUi(self.error_box)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 660)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 660))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 680))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1200, 660))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../icons/destiny_2_beyond_light.jpg"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(100, 70, 951, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_14 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_2.addWidget(self.label_14)
        self.bat = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.bat.setFont(font)
        self.bat.setStyleSheet("color: rgb(2, 116, 112);")
        self.bat.setObjectName("bat")
        self.horizontalLayout_2.addWidget(self.bat)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_11 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_2.addWidget(self.label_11)
        self.bow = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.bow.setFont(font)
        self.bow.setStyleSheet("color: rgb(2, 116, 112);")
        self.bow.setObjectName("bow")
        self.horizontalLayout_2.addWidget(self.bow)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.label_13 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_2.addWidget(self.label_13)
        self.ar = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ar.setFont(font)
        self.ar.setStyleSheet("color: rgb(2, 116, 112);")
        self.ar.setObjectName("ar")
        self.horizontalLayout_2.addWidget(self.ar)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.label_16 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_2.addWidget(self.label_16)
        self.wk = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.wk.setFont(font)
        self.wk.setStyleSheet("color: rgb(2, 116, 112);")
        self.wk.setObjectName("wk")
        self.horizontalLayout_2.addWidget(self.wk)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.total_player = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.total_player.setFont(font)
        self.total_player.setStyleSheet("color: rgb(150, 0, 0);")
        self.total_player.setObjectName("total_player")
        self.horizontalLayout_2.addWidget(self.total_player)
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(90, 50, 981, 61))
        self.graphicsView_2.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:0.982955 rgba(0, 146, 137, 255));")
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(100, 50, 221, 21))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1060, 560, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Bradley Hand ITC")
        font.setPointSize(12)
        font.setUnderline(True)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(180, 150, 291, 61))
        self.graphicsView.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.995, y1:0.937, x2:0, y2:0, stop:0 rgba(143, 0, 12, 255), stop:1 rgba(255, 255, 255, 255));")
        self.graphicsView.setObjectName("graphicsView")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(190, 160, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.point_avl = QtWidgets.QLabel(self.centralwidget)
        self.point_avl.setGeometry(QtCore.QRect(300, 160, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.point_avl.setFont(font)
        self.point_avl.setObjectName("point_avl")
        self.bat_bt = QtWidgets.QRadioButton(self.centralwidget)
        self.bat_bt.setGeometry(QtCore.QRect(190, 190, 82, 17))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.bat_bt.setFont(font)
        self.bat_bt.setObjectName("bat_bt")
        self.bow_bt = QtWidgets.QRadioButton(self.centralwidget)
        self.bow_bt.setGeometry(QtCore.QRect(260, 190, 82, 17))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.bow_bt.setFont(font)
        self.bow_bt.setObjectName("bow_bt")
        self.ar_bt = QtWidgets.QRadioButton(self.centralwidget)
        self.ar_bt.setGeometry(QtCore.QRect(340, 190, 82, 17))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ar_bt.setFont(font)
        self.ar_bt.setObjectName("ar_bt")
        self.wk_bt = QtWidgets.QRadioButton(self.centralwidget)
        self.wk_bt.setGeometry(QtCore.QRect(410, 190, 82, 17))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.wk_bt.setFont(font)
        self.wk_bt.setObjectName("wk_bt")
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_3.setGeometry(QtCore.QRect(660, 150, 291, 61))
        self.graphicsView_3.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.995, y1:0.937, x2:0, y2:0, stop:0 rgba(143, 0, 12, 255), stop:1 rgba(255, 255, 255, 255));")
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.player_avl = QtWidgets.QListWidget(self.centralwidget)
        self.player_avl.setGeometry(QtCore.QRect(180, 210, 291, 351))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.player_avl.setFont(font)
        self.player_avl.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(54, 157, 173, 255), stop:0.397727 rgba(171, 55, 134, 255), stop:0.965909 rgba(255, 227, 227, 255));")
        self.player_avl.setObjectName("player_avl")
        self.player_sel = QtWidgets.QListWidget(self.centralwidget)
        self.player_sel.setGeometry(QtCore.QRect(660, 210, 291, 351))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.player_sel.setFont(font)
        self.player_sel.setStyleSheet("color: rgb(0, 95, 0);\n"
"background-color: qlineargradient(spread:reflect, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 236, 236, 255), stop:0.613636 rgba(171, 59, 135, 255), stop:0.988636 rgba(54, 157, 173, 255));")
        self.player_sel.setObjectName("player_sel")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(670, 160, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.point_used = QtWidgets.QLabel(self.centralwidget)
        self.point_used.setGeometry(QtCore.QRect(750, 160, 47, 16))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.point_used.setFont(font)
        self.point_used.setObjectName("point_used")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(670, 179, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.team_name = QtWidgets.QLabel(self.centralwidget)
        self.team_name.setGeometry(QtCore.QRect(750, 186, 201, 20))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.team_name.setFont(font)
        self.team_name.setObjectName("team_name")
        self.label.raise_()
        self.graphicsView_2.raise_()
        self.horizontalLayoutWidget_2.raise_()
        self.label_2.raise_()
        self.label_4.raise_()
        self.graphicsView.raise_()
        self.label_5.raise_()
        self.point_avl.raise_()
        self.bat_bt.raise_()
        self.bow_bt.raise_()
        self.ar_bt.raise_()
        self.wk_bt.raise_()
        self.graphicsView_3.raise_()
        self.player_avl.raise_()
        self.player_sel.raise_()
        self.label_9.raise_()
        self.label_7.raise_()
        self.point_used.raise_()
        self.team_name.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        self.menuManage_Team.setObjectName("menuManage_Team")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionOpen_Team = QtWidgets.QAction(MainWindow)
        self.actionOpen_Team.setObjectName("actionOpen_Team")
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionEvaluate_Team = QtWidgets.QAction(MainWindow)
        self.actionEvaluate_Team.setObjectName("actionEvaluate_Team")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuManage_Team.addAction(self.actionNew_Team)
        self.menuManage_Team.addAction(self.actionOpen_Team)
        self.menuManage_Team.addAction(self.actionSave_Team)
        self.menuManage_Team.addAction(self.actionEvaluate_Team)
        self.menuManage_Team.addAction(self.actionQuit)
        self.menubar.addAction(self.menuManage_Team.menuAction())
#===================================================================================================================================================
#menubar triggered.
        self.actionNew_Team.triggered.connect(self.newteam)
        self.actionOpen_Team.triggered.connect(self.openfile)
        self.actionSave_Team.triggered.connect(self.save_team)
        self.actionEvaluate_Team.triggered.connect(self.eval_team)
        self.actionQuit.triggered.connect(self.quit)
#removing iteams in list.
        self.player_avl.itemDoubleClicked.connect(self.removelist1)
        self.player_sel.itemDoubleClicked.connect(self.removelist2)
#initializing variables.
        self.batc=0
        self.bwlc=0
        self.arc=0
        self.wkc=0
        self.avl=1000
        self.used=0
        self.total=0
#radio button toggled.
        self.bat_bt.toggled.connect(self.ctg)
        self.bow_bt.toggled.connect(self.ctg)
        self.ar_bt.toggled.connect(self.ctg)
        self.wk_bt.toggled.connect(self.ctg)
#===================================================================================================================================================
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_14.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.bat.setText(_translate("MainWindow", "##"))
        self.label_11.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.bow.setText(_translate("MainWindow", "##"))
        self.label_13.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.ar.setText(_translate("MainWindow", "##"))
        self.label_16.setText(_translate("MainWindow", "Wicket_keepers(WK)"))
        self.wk.setText(_translate("MainWindow", "##"))
        self.total_player.setText(_translate("MainWindow", "0/11"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#950000;\">Your Selections</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">Developer:</span></p><p><span style=\" font-weight:600; color:#ffffff;\">Adarsh Nishad</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "Points Available"))
        self.point_avl.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#027470;\">####</span></p></body></html>"))
        self.bat_bt.setText(_translate("MainWindow", "BAT"))
        self.bow_bt.setText(_translate("MainWindow", "BOW"))
        self.ar_bt.setText(_translate("MainWindow", "AR"))
        self.wk_bt.setText(_translate("MainWindow", "WK"))
        self.label_7.setText(_translate("MainWindow", "Points Used"))
        self.point_used.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#027470;\">####</span></p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "Team Name"))
        self.team_name.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#027470;\">Display Here</span></p></body></html>"))
        self.menuManage_Team.setTitle(_translate("MainWindow", "Manage Team"))
        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))
        self.actionOpen_Team.setText(_translate("MainWindow", "Open Team"))
        self.actionSave_Team.setText(_translate("MainWindow", "Save Team"))
        self.actionEvaluate_Team.setText(_translate("MainWindow", "Evaluate Team"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))

#**********************************************************************************************************************************************************
#methods for menubar triggered actions.
    def newteam(self):
        self.clr()
        self.New.show()
        self.new_ob.save_bt.clicked.connect(self.set_teamname)
    def set_teamname(self):
        self.team_name.setText(str(self.new_ob.new_team.text()))
        self.disp()
        self.New.close()

    def openfile(self):
        self.clr()
        self.disp()
        self.open_ob.setupUi(self.Open)
        self.Open.show()
        self.open_ob.open_bt.clicked.connect(self.openteam)
    def openteam(self):
        teamname = self.open_ob.open_list.currentText()
        self.team_name.setText(teamname)
        cur=cursfantasy.execute("SELECT players from teams WHERE name= '" + teamname + "';")
        row = cur.fetchall()
        sellist=[]
        score = []
        for i in row:
            cursfantasy.execute("SELECT value from stats WHERE player='" + i[0] + "';")
            sellist.append(i[0])
            y = cursfantasy.fetchone()
            score.append(y[0])
        sum = 0
        for i in score:
            sum += i
        self.used=sum
        self.avl = 1000 - sum #row[1]
        self.player_sel.addItems(sellist)
        count = self.player_sel.count()

        for i in range(count - 1):
            ply = self.player_sel.item(i).text()
            sql = "select ctg from stats where player='" + ply + "';"
            cur = cursfantasy.execute(sql)
            row = cur.fetchone()
            ctgr = row[0]
            if ctgr == "BAT": self.batc += 1
            if ctgr == "BWL": self.bwlc += 1
            if ctgr == "AR": self.arc += 1
            if ctgr == "WK": self.wkc += 1
        self.disp()
        self.Open.close()

    def save_team(self):
        count = self.player_sel.count()
        sellist=[]
        for i in range(count):
            sellist.append(self.player_sel.item(i).text())

        if self.batc + self.bwlc + self.arc + self.wkc != 11:
            self.errormsg("Insufficient players")
            return
        for i in range(count):
            try:
                cursfantasy.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?);",
                                    (self.team_name.text(),sellist[i],player_points[sellist[i]]))#, selplyrl, str(self.used)))
                self.save_box.show()
                myfantasy.commit()
            except:
                self.errormsg("Error in Operation")
                myfantasy.rollback()

    def eval_team(self):
        self.evaluate_ob.setupUi(self.Evaluate)
        self.Evaluate.show()

    def quit(self):
        self.errormsg("Thank YOU for Visiting....Hope you enjoyed !!")
        sys.exit()
#***********************************************************************************************************************************************************

#methode to Display effects on home window.
    def disp(self):
        self.point_avl.setText(str(self.avl))
        self.point_used.setText(str(self.used))
        self.bat.setText(str(self.batc))
        self.bow.setText(str(self.bwlc))
        self.ar.setText(str(self.arc))
        self.wk.setText(str(self.wkc))
        self.total_player.setText(str(self.player_sel.count())+"/11")

#methode to reset the home window.
    def clr(self):
        self.batc=0
        self.bwlc=0
        self.arc=0
        self.wkc=0
        self.avl=1000
        self.used=0
        self.player_avl.clear()
        self.player_sel.clear()

#methde to show error if selection criterion is violated through error_box module.
    def errormsg(self,msg):
        self.error_ob.setupUi(self.error_box)
        self.error_ob.error_msg.setText(msg)
        self.error_box.show()

# ------------------------------------------------------------------------------------------------------------------------------------------------
# methode to remove players from available players list.
    def removelist1(self, item):
        ctgr = ''
        if self.bat_bt.isChecked() == True: ctgr = 'BAT'
        if self.bow_bt.isChecked() == True: ctgr = 'BWL'
        if self.ar_bt.isChecked() == True: ctgr = 'AR'
        if self.wk_bt.isChecked() == True: ctgr = 'WK'
        ret = self.criteria(ctgr, item)
        if ret == True:
            self.player_avl.takeItem(self.player_avl.row(item))
            self.player_sel.addItem(item.text())
            self.disp()

# methode to remove players from selected players list.
    def removelist2(self, item):
        self.player_sel.takeItem(self.player_sel.row(item))
        print(item.text())
        cursor = cursfantasy.execute("SELECT player,value, ctg from stats where player='" + item.text() + "'")
        row = cursor.fetchone()
        self.avl = self.avl + int(row[1])
        self.used = self.used - int(row[1])
        ctgr = row[2]
        if ctgr == "BAT":
            self.batc -= 1
            if self.bat_bt.isChecked() == True: self.player_avl.addItem(item.text())
        if ctgr == "BWL":
            self.bwlc -= 1
            if self.bow_bt.isChecked() == True: self.player_avl.addItem(item.text())
        if ctgr == "AR":
            self.arc -= 1
            if self.ar_bt.isChecked() == True: self.player_avl.addItem(item.text())
        if ctgr == "WK":
            self.wkc -= 1
            if self.wk_bt.isChecked() == True: self.player_avl.addItem(item.text())
        self.disp()
# --------------------------------------------------------------------------------------------------------------------------------------------------

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#other methods as per the use.
    def ctg(self):
        ctgr = ''
        if self.bat_bt.isChecked() == True: ctgr = 'BAT'
        if self.bow_bt.isChecked() == True: ctgr = 'BWL'
        if self.ar_bt.isChecked() == True: ctgr = 'AR'
        if self.wk_bt.isChecked() == True: ctgr = 'WK'
        self.insrt_avlplayer(ctgr)

    def insrt_avlplayer(self, ctgr):
        if self.team_name.text() == "<html><head/><body><p><span style=\" color:#027470;\">Display Here</span></p></body></html>":
            self.newteam()
            #self.New.show()
            return
        self.player_avl.clear()
        sql = "SELECT player FROM stats where ctg='" + ctgr + "';"
        record = cursfantasy.execute(sql)
        for row in record:
            selected = []
            for i in range(self.player_sel.count()):
                selected.append(self.player_sel.item(i).text())
            if row[0] not in selected: self.player_avl.addItem(row[0])

    def criteria(self, ctgr, item):
        msg = ''
        if ctgr == "BAT" and self.batc >= 5: msg = "You can\'t select more than 5 Batsmen"
        if ctgr == "BWL" and self.bwlc >= 5: msg = "You can\'t select more than 5 Bowlers"
        if ctgr == "AR" and self.arc >= 3: msg = "You can\'t select more than 3 Allrounders"
        if ctgr == "WK" and self.wkc >= 1: msg = "You can\'t select more than 1 Wicketkeeper"
        if msg != '':
            self.errormsg(msg)
            return False

        if self.avl <= 0:
            msg = "You Have Exhausted your Points"
            self.errormsg(msg)
            return False

        if ctgr == "BAT": self.batc += 1
        if ctgr == "BWL": self.bwlc += 1
        if ctgr == "AR": self.arc += 1
        if ctgr == "WK": self.wkc += 1

        sql = "SELECT value from stats where player='" + item.text() + "'"
        cur = cursfantasy.execute(sql)
        row = cur.fetchone()
        self.avl -= int(row[0])
        self.used += int(row[0])
        return True
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
